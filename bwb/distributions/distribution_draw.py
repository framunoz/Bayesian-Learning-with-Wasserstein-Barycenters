import torch
from PIL import Image

from bwb.config import Config
from bwb.distributions.discrete_distribution import DiscreteDistribution

__all__ = [
    "DistributionDraw",
]

config = Config()


class DistributionDraw(DiscreteDistribution):
    """Distribution generated by a drawing, which is represented by a matrix."""

    def __init__(
            self,
            grayscale,
            device=None,
    ):
        # If device is None, uso the device of the grayscale tensor
        if isinstance(grayscale, torch.Tensor):
            device = device or grayscale.device
        # Else, use the device by default
        device: torch.device = torch.device(device or config.device)

        # Save the grayscales for create images
        self.grayscale: torch.Tensor = torch.as_tensor(
            grayscale,
            dtype=torch.uint8,  # Use uint8 for images
            device=device
        )

        # Get the shape information
        self.shape: torch.Size = self.grayscale.shape
        if len(self.shape) != 2:
            raise ValueError("The shape of the 'grayscale' tensor"
                             " must be a (n, m) shape tensor.")
        n, m = self.shape

        # Get the weights from the grayscale
        weights: torch.Tensor = self.grayscale / 255
        weights /= torch.sum(weights)
        weights = weights.reshape((-1,))

        # Get the support as coordinates
        indx = torch.arange(n * m, device=device).reshape(-1, 1)
        support = torch.cat((indx // m, indx % m), 1)

        super(DistributionDraw, self).__init__(pk=weights, xk=support, device=device)

    @property
    def image(self) -> Image.Image:
        """Representation of the Image.

        :return: An PIL.Image.Image instance.
        """
        return Image.fromarray(255 - self.grayscale.cpu().numpy())

    def _repr_png_(self):
        """iPython display hook support

        :returns: png version of the image as bytes
        """
        return self.image._repr_png_()
