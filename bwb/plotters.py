"""
Module that contains functions to plot images and histograms.
"""
import typing as t
import warnings

import numpy as np
import pandas as pd
import PIL.Image
import seaborn as sns
from matplotlib import pyplot as plt

from bwb.logging import get_logger

_log = get_logger(__name__)


# noinspection PyMissingOrEmptyDocstring,PyPropertyDefinition
class PDistribution(t.Protocol):
    @property
    def image(self) -> PIL.Image.Image:
        ...


def plot_list_of_images(
    list_of_images: t.Sequence[PIL.Image.Image],
    n_rows: int = 3, n_cols: int = 12, factor: float = 1.5,
    title=None, cmap: str = "binary_r",
    labels: t.Optional[t.Sequence[str]] = None,
) -> tuple[plt.Figure, np.ndarray[plt.Axes] | plt.Axes]:
    """
    Function that plots a list of images.

    :param list_of_images: The list of images to draw.
    :type list_of_images: list[PIL.Image.Image]
    :param n_rows: The number of rows of the plot.
    :type n_rows: int
    :param n_cols: The number of columns of the plot.
    :type n_cols: int
    :param factor: The factor to multiply the number of rows by the number of columns.
    :type factor: float
    :param title: The title of the plot.
    :type title: str
    :param labels: The labels of the images.
    :type labels: list[str]
    :param cmap: The colormap of the plot.
    :type cmap: str
    :return: The figure and the axes of the plot.
    """

    n_images = len(list_of_images)
    if n_images < n_rows * n_cols:
        msg = "The number of images is less than the number of rows times the number of columns."
        _log.warning(msg)
        warnings.warn(msg, UserWarning, stacklevel=2)
    n_images = min(n_images, n_rows * n_cols)

    labels: list[str] = labels if labels is not None else [f"{i}" for i in range(n_images)]
    if len(labels) < n_images:
        msg = "The number of labels is different from the number of images."
        _log.warning(msg)
        warnings.warn(msg, UserWarning, stacklevel=2)

    fig, axs = plt.subplots(
        n_rows, n_cols, figsize=(n_cols * factor, n_rows * factor),
        subplot_kw={"xticks": [], "yticks": []}
    )  # type: plt.Figure, np.ndarray[plt.Axes]

    fig.suptitle(title, fontsize=16)

    for i, ax in enumerate(axs.flat):  # type: int, plt.Axes
        if i < n_images:
            ax.imshow(list_of_images[i], cmap=cmap)
            ax.set_xlabel(labels[i])
        else:
            ax.axis("off")

    plt.tight_layout()
    plt.show()

    return fig, axs


def plot_list_of_draws(
    list_of_draws: t.Sequence[PDistribution],
    n_rows: int = 4, n_cols=12, factor: float = 1.5,
    title=None, cmap: str = "binary",
    labels: t.Optional[t.Sequence[str]] = None,
) -> tuple[plt.Figure, np.ndarray[plt.Axes] | plt.Axes]:
    """
    Function that plots a list of DistributionDraws instances.

    :param list_of_draws: The list of DistributionDraws instances to draw.
    :type list_of_draws: list[DistributionDraws]
    :param n_rows: The number of rows of the plot.
    :type n_rows: int
    :param n_cols: The number of columns of the plot.
    :type n_cols: int
    :param factor: The factor to multiply the number of rows by the number of columns.
    :type factor: float
    :param title: The title of the plot.
    :type title: str
    :param labels: The labels of the images.
    :type labels: list[str]
    :param cmap: The colormap of the plot.
    :type cmap: str

    """

    list_of_images: list[PIL.Image.Image] = [draw.image for draw in list_of_draws]
    return plot_list_of_images(
        list_of_images=list_of_images,
        n_rows=n_rows, n_cols=n_cols, factor=factor,
        title=title, cmap=cmap, labels=labels
    )


def plot_histogram_from_points(
    data: list[tuple[int, int]],
    title: str = "Histogram of the distribution generated by a drawing",
    xlabel: str = "Y-Axis",
    ylabel: str = "X-Axis",
    histplot_kwargs: t.Optional[dict] = None,
):
    """
    Function that plots a histogram from a list of points.

    :param data: The list of points to draw.
    :param title: The title of the plot.
    :param xlabel: The label of the x-axis.
    :param ylabel: The label of the y-axis.
    :param histplot_kwargs: Optional arguments to pass to the seaborn.histplot function. For further
        information, please see the documentation of that function.
    :return: The return of the seaborn.histplot function.
    """
    # Instance the kwargs of the histplot and set default values.
    histplot_kwargs = dict() if histplot_kwargs is None else histplot_kwargs
    histplot_kwargs.setdefault("bins", 100)
    histplot_kwargs.setdefault("cbar", True)

    df = pd.DataFrame(data)
    histplot_return = sns.histplot(data=df, x=0, y=1, **histplot_kwargs)
    plt.xlabel(xlabel)
    plt.ylabel(ylabel)
    plt.title(title)

    return histplot_return
